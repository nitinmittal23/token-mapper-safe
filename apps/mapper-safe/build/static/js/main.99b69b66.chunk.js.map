{"version":3,"sources":["serviceWorker.ts","hooks/useServices/interfaceRepository.ts","utils.ts","components/WidgetWrapper.tsx","components/Dashboard.tsx","hooks/useServices/index.tsx","global.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","getAbi","memoize","apiUrl","a","axios","get","abiUrlGetterByNetwork","MAINNET","address","MORDEN","RINKEBY","ROPSTEN","GOERLI","KOVAN","XDAI","ENERGY_WEB_CHAIN","VOLTA","UNKNOWN","InterfaceRepository","network","web3","_isMethodPayable","m","payable","stateMutability","this","getAbiUrl","Error","abi","data","status","message","result","addressOrAbi","utils","isAddress","_loadAbiFromBlockExplorer","abiString","JSON","parse","methods","filter","e","includes","type","toLowerCase","constant","map","inputs","name","payableFallback","findIndex","rpcUrlGetterByNetwork","token","Card","styled","div","WidgetWrapper","children","ButtonContainer","StyledSelect","Select","StyledTitle","Title","StyledText","Text","StyledExamples","ModalBody","txs","deleteTx","tx","index","Box","display","flexDirection","alignItems","justifyContent","width","size","variant","iconType","color","onClick","description","Dashboard","useSafeAppsSDK","sdk","services","useState","setWeb3","interfaceRepo","setInterfaceRepo","useEffect","rpcUrlGetter","rpcUrl","process","web3Instance","Web3","useServices","safe","setAddressOrAbi","loadAbiError","setLoadAbiError","showExamples","setShowExamples","toAddress","setToAddress","undefined","contract","setContract","reviewing","setReviewing","selectedMethodIndex","setSelectedMethodIndex","inputCache","setInputCache","addTxError","setAddTxError","transactions","setTransactions","value","setValue","handleAddressOrABI","cleanInput","currentTarget","trim","length","loadAbi","console","error","handleMethod","useCallback","methodIndex","handleInput","inputIndex","input","slice","getContractMethod","isValueInputVisible","method","addTransaction","cleanInputs","i","cleanValue","charAt","replace","eth","encodeFunctionCall","cleanTo","toChecksumAddress","toWei","push","raw","to","deleteTransaction","newTxs","splice","sendTransactions","send","d","handleDismiss","getInputInterface","startsWith","components","c","internalType","toString","endsWith","body","onClose","title","footer","handleOk","handleCancel","label","onChange","style","marginTop","target","marginBottom","items","id","activeItemId","onItemClick","Number","prev","strong","as","disabled","GlobalStyle","createGlobalStyle","avertaFont","avertaBoldFont","ReactDOM","render","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99b69b66.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\nimport memoize from 'lodash/memoize';\nimport { Networks } from '@gnosis.pm/safe-apps-sdk';\n\ninterface ContractMethod {\n  inputs: any[];\n  name: string;\n  payable: boolean;\n}\n\nexport interface ContractInterface {\n  payableFallback: boolean;\n  methods: ContractMethod[];\n}\n\nconst getAbi = memoize(async (apiUrl: string) => axios.get(apiUrl));\n\nconst abiUrlGetterByNetwork: {\n  [key in Networks]?: ((address: string) => string) | null;\n} = {\n  MAINNET: (address: string) => `https://api.etherscan.io/api?module=contract&action=getabi&address=${address}`,\n  MORDEN: null,\n  RINKEBY: (address: string) => `https://api-rinkeby.etherscan.io/api?module=contract&action=getabi&address=${address}`,\n  ROPSTEN: null,\n  GOERLI: null,\n  KOVAN: null,\n  XDAI: (address: string) => `https://blockscout.com/poa/xdai/api?module=contract&action=getabi&address=${address}`,\n  ENERGY_WEB_CHAIN: (address: string) =>\n    `https://explorer.energyweb.org/api?module=contract&action=getabi&address=${address}`,\n  VOLTA: (address: string) =>\n    `https://volta-explorer.energyweb.org/api?module=contract&action=getabi&address=${address}`,\n  UNKNOWN: null,\n};\n\nclass InterfaceRepository {\n  network: Networks;\n  web3: any;\n\n  constructor(network: Networks, web3: any) {\n    this.network = network;\n    this.web3 = web3;\n  }\n\n  private async _loadAbiFromBlockExplorer(address: string): Promise<string> {\n    const getAbiUrl = abiUrlGetterByNetwork[this.network];\n    if (!getAbiUrl) {\n      throw Error(`Network: ${this.network} not supported.`);\n    }\n\n    const abi = await getAbi(getAbiUrl(address));\n    if (abi.data.status !== '1') throw Error(`Request not successful: ${abi.data.message}; ${abi.data.result}.`);\n    return abi.data.result;\n  }\n\n  private _isMethodPayable = (m: any) => m.payable || m.stateMutability === 'payable';\n\n  async loadAbi(addressOrAbi: string): Promise<ContractInterface> {\n    const abiString = this.web3.utils.isAddress(addressOrAbi)\n      ? await this._loadAbiFromBlockExplorer(addressOrAbi)\n      : addressOrAbi;\n\n    const abi = JSON.parse(abiString);\n\n    const methods = abi\n      .filter((e: any) => {\n        if (['pure', 'view'].includes(e.stateMutability)) {\n          return false;\n        }\n\n        if (e?.type.toLowerCase() === 'event') {\n          return false;\n        }\n\n        return !e.constant;\n      })\n      .map((m: any) => {\n        return {\n          inputs: m.inputs || [],\n          name: m.name || (m.type === 'fallback' ? 'fallback' : 'receive'),\n          payable: this._isMethodPayable(m),\n        };\n      });\n\n    const payableFallback = abi.findIndex((e: any) => e.type === 'fallback' && this._isMethodPayable(e)) >= 0;\n\n    return { payableFallback, methods };\n  }\n}\n\nexport type InterfaceRepo = InstanceType<typeof InterfaceRepository>;\n\nexport default InterfaceRepository;\n","import { Networks } from '@gnosis.pm/safe-apps-sdk';\n\nexport const rpcUrlGetterByNetwork: {\n  [key in Networks]: null | ((token?: string) => string);\n} = {\n  MAINNET: (token) => `https://mainnet.infura.io/v3/${token}`,\n  MORDEN: null,\n  ROPSTEN: null,\n  RINKEBY: (token) => `https://rinkeby.infura.io/v3/${token}`,\n  GOERLI: null,\n  KOVAN: null,\n  XDAI: () => 'https://dai.poa.network',\n  ENERGY_WEB_CHAIN: () => 'https://rpc.energyweb.org',\n  VOLTA: () => 'https://volta-rpc.energyweb.org',\n  UNKNOWN: null,\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Card = styled.div`\n  display: flex;\n  justify-content: left;\n  padding: 24px;\n`;\n\nconst WidgetWrapper: React.FC = ({ children }) => (\n  <Card>\n    <div>{children}</div>\n  </Card>\n);\n\nexport default WidgetWrapper;\n","import {\n  Button,\n  Text,\n  Title,\n  TextField,\n  GenericModal,\n  Select,\n  ModalFooterConfirmation,\n  ButtonLink,\n} from '@gnosis.pm/safe-react-components';\nimport React, { useState, useCallback } from 'react';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport Box from '@material-ui/core/Box';\nimport styled from 'styled-components';\nimport { AbiItem } from 'web3-utils';\n\nimport { ContractInterface } from '../hooks/useServices/interfaceRepository';\nimport useServices from '../hooks/useServices';\nimport { ProposedTransaction } from '../typings/models';\nimport WidgetWrapper from './WidgetWrapper';\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 15px;\n`;\n\nconst StyledSelect = styled(Select)`\n  width: 400px;\n`;\n\nconst StyledTitle = styled(Title)`\n  margin-top: 0px;\n  margin-bottom: 5px;\n`;\n\nconst StyledText = styled(Text)`\n  margin-bottom: 15px;\n`;\n\nconst StyledExamples = styled.div`\n  button {\n    padding: 0;\n  }\n`;\n\nconst ModalBody = ({ txs, deleteTx }: { txs: Array<ProposedTransaction>; deleteTx: (index: number) => void }) => {\n  return (\n    <>\n      {txs.map((tx, index) => (\n        <Box\n          key={index}\n          display=\"flex\"\n          flexDirection=\"row-reverse\"\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n          width=\"100%\"\n        >\n          <Button size=\"md\" variant=\"outlined\" iconType=\"delete\" color=\"error\" onClick={() => deleteTx(index)}>\n            {''}\n          </Button>\n          <Text size=\"lg\">{tx.description}</Text>\n        </Box>\n      ))}\n    </>\n  );\n};\n\nconst Dashboard = () => {\n  const { sdk, safe } = useSafeAppsSDK();\n  const services = useServices(safe.network);\n\n  const [addressOrAbi, setAddressOrAbi] = useState('');\n  const [loadAbiError, setLoadAbiError] = useState(false);\n  const [showExamples, setShowExamples] = useState(false);\n  const [toAddress, setToAddress] = useState('');\n  const [contract, setContract] = useState<ContractInterface | undefined>(undefined);\n  const [reviewing, setReviewing] = useState(false);\n  const [selectedMethodIndex, setSelectedMethodIndex] = useState(0);\n  const [inputCache, setInputCache] = useState<string[]>([]);\n  const [addTxError, setAddTxError] = useState<string | undefined>();\n  const [transactions, setTransactions] = useState<ProposedTransaction[]>([]);\n  const [value, setValue] = useState('');\n\n  const handleAddressOrABI = async (e: React.ChangeEvent<HTMLInputElement>): Promise<ContractInterface | void> => {\n    setContract(undefined);\n    setLoadAbiError(false);\n\n    const cleanInput = e.currentTarget?.value?.trim();\n    setAddressOrAbi(cleanInput);\n\n    if (!cleanInput.length || !services.web3 || !services.interfaceRepo) {\n      return;\n    }\n\n    if (toAddress.length === 0 && services.web3.utils.isAddress(cleanInput)) {\n      setToAddress(cleanInput);\n    }\n\n    try {\n      const contract = await services.interfaceRepo.loadAbi(cleanInput);\n      setContract(contract);\n    } catch (e) {\n      setLoadAbiError(true);\n      console.error(e);\n    }\n  };\n\n  const handleMethod = useCallback(\n    async (methodIndex: number) => {\n      if (!contract || contract.methods.length <= methodIndex) return;\n      setSelectedMethodIndex(methodIndex);\n    },\n    [contract],\n  );\n\n  const handleInput = useCallback(\n    async (inputIndex: number, input: string) => {\n      inputCache[inputIndex] = input;\n      setInputCache(inputCache.slice());\n    },\n    [inputCache],\n  );\n\n  const getContractMethod = () => contract?.methods[selectedMethodIndex];\n\n  const isValueInputVisible = () => {\n    const method = getContractMethod();\n    return method?.payable;\n  };\n\n  const addTransaction = useCallback(async () => {\n    let description = '';\n    let data = '';\n\n    const web3 = services.web3;\n\n    if (!web3) {\n      return;\n    }\n\n    if (contract && contract.methods.length > selectedMethodIndex) {\n      const method = contract.methods[selectedMethodIndex];\n      const cleanInputs = [];\n\n      description = method.name + ' (';\n      for (let i = 0; i < method.inputs.length; i++) {\n        const cleanValue = inputCache[i] || '';\n        cleanInputs[i] = cleanValue.charAt(0) === '[' ? JSON.parse(cleanValue.replace(/\"/g, '\"')) : cleanValue;\n        if (i > 0) {\n          description += ', ';\n        }\n        const input = method.inputs[i];\n        description += (input.name || input.type) + ': ' + cleanValue;\n      }\n      description += ')';\n\n      try {\n        data = web3.eth.abi.encodeFunctionCall(method as AbiItem, cleanInputs);\n      } catch (error) {\n        setAddTxError(error.message);\n        return;\n      }\n    }\n\n    try {\n      const cleanTo = web3.utils.toChecksumAddress(toAddress);\n      const cleanValue = value.length > 0 ? web3.utils.toWei(value) : 0;\n\n      if (data.length === 0) {\n        data = '0x';\n      }\n\n      if (description.length === 0) {\n        description = `Transfer ${cleanValue} ETH to ${cleanTo}`;\n      }\n\n      transactions.push({\n        description,\n        raw: { to: cleanTo, value: cleanValue, data },\n      });\n\n      setInputCache([]);\n      setTransactions(transactions);\n      setSelectedMethodIndex(0);\n      setValue('');\n    } catch (e) {\n      console.error(e);\n    }\n  }, [services, transactions, toAddress, value, contract, selectedMethodIndex, inputCache]);\n\n  const deleteTransaction = useCallback(\n    async (inputIndex: number) => {\n      const newTxs = transactions.slice();\n      newTxs.splice(inputIndex, 1);\n      setTransactions(newTxs);\n    },\n    [transactions],\n  );\n\n  const sendTransactions = useCallback(async () => {\n    if (!transactions.length) {\n      return;\n    }\n\n    try {\n      sdk.txs.send({ txs: transactions.map((d) => d.raw) });\n    } catch (e) {\n      console.error(e);\n    }\n  }, [sdk, transactions]);\n\n  const handleSubmit = () => {\n    sendTransactions();\n    setTransactions([]);\n    setReviewing(false);\n  };\n\n  const handleDismiss = () => {\n    setReviewing(false);\n  };\n\n  const getInputInterface = (input: any) => {\n    // This code renders a helper for the input text.\n    // When the parameter is of Tuple type, it renders an array with the parameters types\n    // required to form the Tuple, if not, it renders the parameter type directly.\n    if (input.type.startsWith('tuple')) {\n      return `tuple(${input.components.map((c: any) => c.internalType).toString()})${\n        input.type.endsWith('[]') ? '[]' : ''\n      }`;\n    } else {\n      return input.type;\n    }\n  };\n\n  return (\n    <WidgetWrapper>\n      <StyledTitle size=\"lg\">Token Mapper</StyledTitle>\n      <StyledText size=\"lg\">\n        This app allows you to Map token on Polygon.\n      </StyledText>\n      <StyledText size=\"md\">\n        <strong>PoS - [abi - 0xD4888faB8bd39A663B63161F5eE1Eae31a25B653], [rootchainmanagerProxy- 0xA0c68C638235ee32657e8f720a23ceC1bFc77C77]</strong>\n        <br/>\n        <br/>\n        * erc20TokenType = '0x8ae85d849167ff996c04040c44924fd364217285e4cad818292c7ac37c0a345b'\n        <br/>\n        * erc721TokenType = '0x73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a'\n        <br/>\n        * erc1155TokenType ='0x973bb64086f173ec8099b7ed3d43da984f4a332e4417a08bc6a286e6402b0586'\n        <br/>\n        * mintableErc20TokenType = '0x5ffef61af1560b9aefc0e42aaa0f9464854ab113ab7b8bfab271be94cdb1d053'\n        <br/>\n        * mintableErc721TokenType = '0xd4392723c111fcb98b073fe55873efb447bcd23cd3e49ec9ea2581930cd01ddc'\n        <br/>\n        * mintableErc1155TokenType = '0xb62883a28321b19a93c6657bfb8ea4cec51ed05c3ab26ecec680fa0c7efb31b9'\n        <br/>\n        <br/>\n        <strong>Plasma - [abi - 0x98165b71cdDea047C0A49413350C40571195fd07], [governance address- 0x6e7a5820baD6cebA8Ef5ea69c0C92EbbDAc9CE48]</strong>\n        <br/>\n        <br/>\n        * registery address = '0x33a02E6cC863D393d6Bf231B697b82F6e499cA71'\n        <br/>\n        <br/>\n        <strong>L1L2 - [abi - 0x28e4F3a7f651294B9564800b2D01f35189A5bFbE], [stateSender- 0x28e4F3a7f651294B9564800b2D01f35189A5bFbE]</strong>\n        <br/>\n        <br/>\n        <strong>L2L1 - [abi - 0xD4888faB8bd39A663B63161F5eE1Eae31a25B653], [rootchainmanagerProxy- 0xA0c68C638235ee32657e8f720a23ceC1bFc77C77]</strong>\n        <br/>\n        <br/>\n        * tokenType ='0xd2cb9bec761762794c5f1aac30cd08c4b162e1c154230a5c97134039a182238b'\n      </StyledText>\n\n      {/* TXs MODAL */}\n      {reviewing && transactions.length > 0 && (\n        <GenericModal\n          body={<ModalBody txs={transactions} deleteTx={deleteTransaction} />}\n          onClose={handleDismiss}\n          title=\"Send Transactions\"\n          footer={<ModalFooterConfirmation handleOk={handleSubmit} handleCancel={handleDismiss} />}\n        />\n      )}\n\n      {/* ABI Input */}\n      <TextField value={addressOrAbi} label=\"Enter Contract Address or ABI\" onChange={handleAddressOrABI} />\n      {loadAbiError && (\n        <Text color=\"error\" size=\"lg\">\n          There was a problem trying to load the ABI\n        </Text>\n      )}\n\n      {/* ABI Loaded */}\n      {contract && (\n        <>\n          <Title size=\"xs\">Transaction information</Title>\n\n          {!contract?.methods.length && <Text size=\"lg\">Contract ABI doesn't have any public methods.</Text>}\n\n          {/* Input To (destination) */}\n          {(isValueInputVisible() || contract.methods.length > 0) && (\n            <>\n              <TextField\n                style={{ marginTop: 10 }}\n                value={toAddress}\n                label=\"To Address\"\n                onChange={(e) => setToAddress(e.target.value)}\n              />\n              <br />\n            </>\n          )}\n\n          {/* Input ETH value */}\n          {isValueInputVisible() && (\n            <>\n              <TextField\n                style={{ marginTop: 10, marginBottom: 10 }}\n                value={value}\n                label=\"ETH\"\n                onChange={(e) => setValue(e.target.value)}\n              />\n\n              <br />\n            </>\n          )}\n\n          {\n            <>\n              {contract.methods.length > 0 && (\n                <>\n                  <br />\n                  <StyledSelect\n                    items={contract.methods.map((method, index) => ({\n                      id: index.toString(),\n                      label: method.name,\n                    }))}\n                    activeItemId={selectedMethodIndex.toString()}\n                    onItemClick={(id: string) => {\n                      setAddTxError(undefined);\n                      handleMethod(Number(id));\n                    }}\n                  />\n                  <StyledExamples>\n                    <ButtonLink color=\"primary\" onClick={() => setShowExamples((prev) => !prev)}>\n                      {showExamples ? 'Hide Examples' : 'Show Examples'}\n                    </ButtonLink>\n\n                    {showExamples && (\n                      <>\n                        <Text size=\"sm\" strong>\n                          string {'> '}\n                          <Text size=\"sm\" as=\"span\">\n                            some value\n                          </Text>\n                        </Text>\n                        <Text size=\"sm\" strong>\n                          uint256 {'> '}\n                          <Text size=\"sm\" as=\"span\">\n                            123\n                          </Text>\n                        </Text>\n                        <Text size=\"sm\" strong>\n                          address {'> '}\n                          <Text size=\"sm\" as=\"span\">\n                            0xDe75665F3BE46D696e5579628fA17b662e6fC04e\n                          </Text>\n                        </Text>\n                        <Text size=\"sm\" strong>\n                          array {'> '}\n                          <Text size=\"sm\" as=\"span\">\n                            [1,2,3]\n                          </Text>\n                        </Text>\n                        <Text size=\"sm\" strong>\n                          Tuple(uint256, string) {'> '}\n                          <Text size=\"sm\" as=\"span\">\n                            [1, \"someValue\"]\n                          </Text>\n                        </Text>\n                        <Text size=\"sm\" strong>\n                          Tuple(uint256, string)[] {'> '}\n                          <Text size=\"sm\" as=\"span\">\n                            [[1, \"someValue\"], [2, \"someOtherValue\"]]\n                          </Text>\n                        </Text>\n                      </>\n                    )}\n                  </StyledExamples>\n                </>\n              )}\n\n              {getContractMethod()?.inputs.map((input, index) => {\n                return (\n                  <div key={index}>\n                    <TextField\n                      style={{ marginTop: 10 }}\n                      value={inputCache[index] || ''}\n                      label={`${input.name || ''}(${getInputInterface(input)})`}\n                      onChange={(e) => {\n                        setAddTxError(undefined);\n                        handleInput(index, e.target.value);\n                      }}\n                    />\n                    <br />\n                  </div>\n                );\n              })}\n\n              {addTxError && (\n                <Text size=\"lg\" color=\"error\">\n                  {addTxError}\n                </Text>\n              )}\n            </>\n          }\n          <br />\n\n          {/* Actions */}\n          <ButtonContainer>\n            {isValueInputVisible() || contract.methods.length > 0 ? (\n              <Button size=\"md\" color=\"primary\" onClick={() => addTransaction()}>\n                Add transaction\n              </Button>\n            ) : (\n              <div></div>\n            )}\n\n            <Button\n              size=\"md\"\n              disabled={!transactions.length}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => setReviewing(true)}\n            >\n              {`Send Transactions ${transactions.length ? `(${transactions.length})` : ''}`}\n            </Button>\n          </ButtonContainer>\n        </>\n      )}\n    </WidgetWrapper>\n  );\n};\n\nexport default Dashboard;\n","import { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Networks } from '@gnosis.pm/safe-apps-sdk';\n\nimport InterfaceRepository from './interfaceRepository';\nimport { InterfaceRepo } from './interfaceRepository';\nimport { rpcUrlGetterByNetwork } from '../../utils';\n\nexport interface Services {\n  web3: Web3 | undefined;\n  interfaceRepo: InterfaceRepo | undefined;\n}\n\nexport default function useServices(network: Networks): Services {\n  const [web3, setWeb3] = useState<Web3 | undefined>();\n  const [interfaceRepo, setInterfaceRepo] = useState<InterfaceRepository | undefined>();\n\n  useEffect(() => {\n    if (!network) {\n      return;\n    }\n\n    const rpcUrlGetter = rpcUrlGetterByNetwork[network];\n    if (!rpcUrlGetter) {\n      throw Error(`RPC URL not defined for network ${network}`);\n    }\n    const rpcUrl = rpcUrlGetter(process.env.REACT_APP_RPC_TOKEN);\n\n    const web3Instance = new Web3(rpcUrl);\n    const interfaceRepo = new InterfaceRepository(network, web3Instance);\n\n    setWeb3(web3Instance);\n    setInterfaceRepo(interfaceRepo);\n  }, [network]);\n\n  return {\n    web3,\n    interfaceRepo,\n  };\n}\n","import { createGlobalStyle } from 'styled-components';\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2';\nimport avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2';\n\nconst GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%\n    }\n\n    body {\n       height: 100%;\n       margin: 0px;\n       padding: 0px;\n    }\n\n    #root {\n        height: 100%;\n    }\n\n    @font-face {\n        font-family: 'Averta';\n        src: local('Averta'), local('Averta Bold'),\n        url(${avertaFont}) format('woff2'),\n        url(${avertaBoldFont}) format('woff');\n    }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from '@gnosis.pm/safe-react-components';\nimport { SafeProvider } from '@gnosis.pm/safe-apps-react-sdk';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport Dashboard from './components/Dashboard';\nimport GlobalStyles from './global';\n\nReactDOM.render(\n  <>\n    <GlobalStyles />\n    <ThemeProvider theme={theme}>\n      <SafeProvider>\n        <Dashboard />\n      </SafeProvider>\n    </ThemeProvider>\n  </>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}